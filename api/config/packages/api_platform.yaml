parameters:
    # Adds a fallback VARNISH_URL if the env var is not set.
    # This allows you to run cache:warmup even if your
    # environment variables are not available yet.
    # You should not need to change this value.
    env(VARNISH_URL): ''
    env(APP_VERSION): ''
    env(APP_TITLE): ''
    env(APP_DESCRIPTION): ''
    env(APP_REPRO): ''
    env(APP_DEMO): ''
    env(CONTAINER_PROJECT_NAME): ''

api_platform:
    mapping:
        paths: ['%kernel.project_dir%/src/Entity']

    # The basic API data
    title: '%env(APP_TITLE)%'
    description: |
        %env(APP_DESCRIPTION)% 
              
        Request Types can be stacked in a parent child like manner, do there is no technical limitation this principle is designed with two to three layers in mind. E.g. the is a country wide definition of a relocation requests (verhuizen in dutch) requiring a person, adres and date property. That is then extended bij the city of Eindhoven to include a current address and phone number. 

        Eindhoven could then expends its own requests to make an expat version including preferred language.

        This would then lead to a string of parent child relations with properties added at each level. To prevent a situation where a party using the requests needs to make a GET call to all of the requests in the stack IT is possible to Just get the requests you need with An extend=true query. Al of the properties of al the requests in that stack Will then be added to the request you GET. Keep in mind that this can get slow with extremely large request types or stacks thereof.

        Properties titles need to be unique in a request post and therefore request stack. This is both checked when getting an request type and when posting of updating a requests type (and will result in a specific error). It is however not checked when posting a requests itself (since a double property nog chance the suspected outcome but would confront the end user with a error). When posting a request against a request type stack that includes more occurences of the same title the property will be validated against the lowest occurrence.

        A request is expected to exists out of properties, the exact properties that An request is expected to exist from are defined in a request type where the request is posted against. As is validation (the requirements that a parameter is held to). A request is validated when posted or updated. And will return An error when not compliant tot validation defined in the request type properties. 
       
    
    version: '%env(APP_VERSION)%'  
    
    # Lets configure the api platform bundle to display the docs in confrmation with common ground standards 
    show_webby: false
    enable_swagger_ui: false
    enable_re_doc: true
    
    # In the NL api strategie we use snake case for naming
    name_converter: 'Symfony\Component\Serializer\NameConverter\CamelCaseToSnakeCaseNameConverter'
    
    # Lets confirm to JSON-HA: first, as per common ground. But allow other serializers
    formats:
        jsonhal:  ['application/hal+json']
        jsonld:   ['application/ld+json']
        jsonapi:  ['application/vnd.api+json']
        json:     ['application/json']
        xml:      ['application/xml']
        yaml:     ['application/x-yaml']
        csv:      ['text/csv']
        html:     ['text/html']
    
    # Varnish integration, remove if unwanted
    http_cache:
        invalidation:
            enabled: true
            varnish_urls: ['%env(VARNISH_URL)%']
        max_age: 0
        shared_max_age: 3600
        vary: ['Content-Type', 'Authorization']
        public: true
        
    # Mercure integration, remove if unwanted
    mercure:
        hub_url: '%env(MERCURE_SUBSCRIBE_URL)%'
