parameters:
    # Adds a fallback VARNISH_URL if the env var is not set.
    # This allows you to run cache:warmup even if your
    # environment variables are not available yet.
    # You should not need to change this value.
    env(VARNISH_URL): ''
    env(APP_VERSION): ''
    env(APP_TITLE): ''
    env(APP_DESCRIPTION): ''
    env(APP_REPRO): ''
    env(APP_DEMO): ''
    env(CONTAINER_PROJECT_NAME): ''

api_platform:
    mapping:
        paths: ['%kernel.project_dir%/src/Entity']

    # The basic API data
    title: '%env(APP_TITLE)%'
    description: |
        %env(APP_DESCRIPTION)%     
        
        Requests signify a request that has been either made by a person/organization to an specific organization or an request that is being formulated by a person/organization but has not yet been submitted to an organization. As such an requests can be stateless, and is by definition without consequence until it is submitted. In that they represent an a form free option for anything that is not an case and an handling route for information that will never become an case.

        Technically requests are designed to align with both [DSO]( https://redocly.github.io/redoc/?url=https://pre.omgevingswet.overheid.nl/knooppunt/apistore/api-docs/Rijkswaterstaat/Gebruikerstoepassingen-IndienenVerzoek/v1) and the case api [zaak-api]( https://zaken-api.vng.cloud/api/v1/schema), but primarily serve to support a [process]( http://ptc.zaakonline.nl). As such, small design interpretation might differ.  They can be found in the [design considerations]( https://github.com/gemeenteshertogenbosch/verzoekregistratiecomponent/blob/master/DESIGN.md).
              
        Request cannot be seen as an standalone entity as they take their definition from [request types]( http://vtc.zaakonline.nl/) where the actual rules that a request should adhere to are defined. Requests on them self only serve to store the in between and end results of processes.                
        
    version: '%env(APP_VERSION)%'  
    
    # Lets configure the api platform bundle to display the docs in confrmation with common ground standards 
    show_webby: false
    enable_swagger_ui: false
    enable_re_doc: true
    
    # In the NL api strategie we use snake case for naming
    name_converter: 'Symfony\Component\Serializer\NameConverter\CamelCaseToSnakeCaseNameConverter'
    
    # Lets confirm to JSON-HA: first, as per common ground. But allow other serializers
    formats:
        jsonhal:  ['application/hal+json']
        jsonld:   ['application/ld+json']
        jsonapi:  ['application/vnd.api+json']
        json:     ['application/json']
        xml:      ['application/xml']
        yaml:     ['application/x-yaml']
        csv:      ['text/csv']
        html:     ['text/html']
    
    # Varnish integration, remove if unwanted
    http_cache:
        invalidation:
            enabled: true
            varnish_urls: ['%env(VARNISH_URL)%']
        max_age: 0
        shared_max_age: 3600
        vary: ['Content-Type', 'Authorization']
        public: true
        
    # Mercure integration, remove if unwanted
    mercure:
        hub_url: '%env(MERCURE_SUBSCRIBE_URL)%'
